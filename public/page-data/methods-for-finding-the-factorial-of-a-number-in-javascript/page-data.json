{"componentChunkName":"component---src-templates-blog-post-js","path":"/methods-for-finding-the-factorial-of-a-number-in-javascript/","result":{"data":{"site":{"siteMetadata":{"title":"I'm Chukwuka"}},"markdownRemark":{"id":"908b7cbe-04aa-53a4-9cf0-d57aa94abb69","excerpt":"In Mathematics, the factorial of a non-negative​ integer n, denoted by n!, is computed as the product of all positive integers less than or equal to n : https…","html":"<p>In Mathematics, the <strong>factorial</strong> of a non-negative​ integer n, denoted by n!, is computed as the product of all positive integers less than or equal to n <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>:</p>\n<p><code class=\"language-text\">n! = n*(n-1)*(n-2)*(n-3)...3*2*1</code></p>\n<p>When you factorialize an integer, you are multiplying that integer by each consecutive integer minus one.</p>\n<p>If the integer is 6, the factorial would be:</p>\n<p><code class=\"language-text\">6! = 6 * 5 * 4 * 3 * 2 * 1</code></p>\n<p>The pattern would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token number\">0</span><span class=\"token operator\">!</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token number\">1</span><span class=\"token operator\">!</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n<span class=\"token number\">2</span><span class=\"token operator\">!</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span>\n<span class=\"token number\">3</span><span class=\"token operator\">!</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span>\n<span class=\"token number\">4</span><span class=\"token operator\">!</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span>\n<span class=\"token number\">5</span><span class=\"token operator\">!</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span>\n<span class=\"token number\">6</span><span class=\"token operator\">!</span> <span class=\"token operator\">=</span> <span class=\"token number\">6</span> <span class=\"token operator\">*</span> <span class=\"token number\">5</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span></code></pre></div>\n<h1>Methods</h1>\n<p>There are two methods we can use to find the factorial of a number in JavaScript.</p>\n<ul>\n<li>Iteration</li>\n<li>Recursion</li>\n</ul>\n<h2>1. The Iterative Method</h2>\n<p>In computer programming, <code class=\"language-text\">iteration</code> is a sequence of instructions that is continually repeated. You can think of iteration as a loop <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>.</p>\n<p>We will use two types of iterations (loops):</p>\n<ul>\n<li>WHILE loop (iterate until a certain condition is reached)</li>\n<li>FOR loop (iterate a certain number of times)</li>\n</ul>\n<h3>a. Using <strong>WHILE</strong> loop</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">factorialize</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Step 1. Create a variable factorial to store num</span>\n  <span class=\"token keyword\">let</span> factorial <span class=\"token operator\">=</span> num\n\n  <span class=\"token comment\">//If a negative num is entered, reject</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// If num = 0 OR num = 1, the factorial will return 1</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Step 2. Create the WHILE loop</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    num<span class=\"token operator\">--</span> <span class=\"token comment\">// decrement by 1 at each iteration</span>\n    factorial <span class=\"token operator\">=</span> factorial <span class=\"token operator\">*</span> num <span class=\"token comment\">// or factorial *= num;</span>\n\n    <span class=\"token comment\">/* \n                    num           num--      let factorial      factorial *= num         \n    1st iteration:   6             5            6             30 = 6 * 5      \n    2nd iteration:   5             4           30             120 = 30 * 4\n    3rd iteration:   4             3           120            360 = 120 * 3\n    4th iteration:   3             2           360            720 = 360 * 2\n    5th iteration:   2             1           720            720 = 720 * 1\n    6th iteration    1             0           720\n    End of the WHILE loop \n    */</span>\n\n    <span class=\"token comment\">// Step 3. Return the factorial of the provided integer</span>\n    <span class=\"token keyword\">return</span> factorial <span class=\"token comment\">// 720</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">factorialize</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>b. Using <strong>FOR</strong> loop</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">factorialize</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// If num = 0 OR num = 1, the factorial will return 1</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> num <span class=\"token operator\">===</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// We start the FOR loop with i = 4</span>\n  <span class=\"token comment\">// We decrement i after each iteration</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// We store the value of num at each iteration</span>\n    num <span class=\"token operator\">=</span> num <span class=\"token operator\">*</span> i <span class=\"token comment\">// or num *= i;</span>\n    <span class=\"token comment\">/* \n                    num      let i = num - 1       num *= i         i--       i >= 1?\n    1st iteration:   5           4 = 5 - 1         20 = 5 * 4        3          yes   \n    2nd iteration:  20           3 = 4 - 1         60 = 20 * 3       2          yes\n    3rd iteration:  60           2 = 3 - 1        120 = 60 * 2       1          yes  \n    4th iteration: 120           1 = 2 - 1        120 = 120 * 1      0          no             \n    5th iteration: 120               0                120\n    End of the FOR loop \n    */</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> num <span class=\"token comment\">//120</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">factorialize</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Pro</strong>: Iteration Takes less memory than the recursive implementation.\n<strong>Con</strong>: The code is lengthier than that of the recursive implementation.</p>\n<h2>2. The Recursive Method</h2>\n<p>In computer science, <code class=\"language-text\">recursion</code> is a method of solving a problem where the solution depends on solutions to smaller instances of the same problem <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. It is implemented by allowing a function to call itself from within its own code.</p>\n<p>Enough talk. Let’s code!</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">factorialize</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// If the number is less than 0, reject it.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// If the number is 0, its factorial is 1.</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Otherwise, call the recursive procedure again</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">*</span> <span class=\"token function\">factorialize</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">/* \n        First Part of the recursion method\n        You need to remember that you won’t have just one call, you’ll have several nested calls\n        \n        Each call: num === \"?\"        \t         num * factorialize(num - 1)\n        1st call – factorialize(5) will return    5  * factorialize(5 - 1) // factorialize(4)\n        2nd call – factorialize(4) will return    4  * factorialize(4 - 1) // factorialize(3)\n        3rd call – factorialize(3) will return    3  * factorialize(3 - 1) // factorialize(2)\n        4th call – factorialize(2) will return    2  * factorialize(2 - 1) // factorialize(1)\n        5th call – factorialize(1) will return    1  * factorialize(1 - 1) // factorialize(0)\n        \n        Second part of the recursion method\n        The method hits the if condition, it returns 1 which num will multiply itself with\n        The function will exit with the total value\n        \n        5th call will return (5 * (5 - 1))     // num = 5 * 4\n        4th call will return (20 * (4 - 1))    // num = 20 * 3\n        3rd call will return (60 * (3 - 1))    // num = 60 * 2\n        2nd call will return (120 * (2 - 1))   // num = 120 * 1\n        1st call will return (120)             // num = 120\n        \n        If we sum up all the calls in one line, we have\n        (5 * (5 - 1) * (4 - 1) * (3 - 1) * (2 - 1)) = 5 * 4 * 3 * 2 * 1 = 120\n        */</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">factorialize</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3><strong>Without comments</strong></h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">factorialize</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">num</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n  <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> num <span class=\"token operator\">*</span> <span class=\"token function\">factorialize</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">factorialize</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>Pro</strong>: Recursion has a shorter and cleaner code.\n<strong>Con</strong>: Greater memory requirements as all the function calls remain on the stack until the base case is reached.</p>\n<p>I hope this helps. Watch out for more tutorials!</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://en.wikipedia.org/wiki/Factorial\">https://en.wikipedia.org/wiki/Factorial</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-1\">\n<p><a href=\"https://computersciencewiki.org/index.php/Iteration#:~:text=In%20computer%20programming%2C%20iteration%20is,iteration%22%20or%20%22iterate%22.&#x26;text=iterate%20until%20a%20certain%20condition,in%20a%20list%20or%20array\">https://computersciencewiki.org/index.php/Iteration#:~:text=In%20computer%20programming%2C%20iteration%20is,iteration%22%20or%20%22iterate%22.&#x26;text=iterate%20until%20a%20certain%20condition,in%20a%20list%20or%20array</a></p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-1\">\n<p><a href=\"https://en.wikipedia.org/wiki/Recursion_(computer_science)#:~:text=In%20computer%20science%2C%20recursion%20is,instances%20of%20the%20same%20problem.&#x26;text=Most%20computer%20programming%20languages%20support,from%20within%20its%20own%20code\">https://en.wikipedia.org/wiki/Recursion_(computer_science)#:~:text=In%20computer%20science%2C%20recursion%20is,instances%20of%20the%20same%20problem.&#x26;text=Most%20computer%20programming%20languages%20support,from%20within%20its%20own%20code</a>.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Methods For Finding The Factorial Of A Number In JavaScript","date":"May 11, 2021","description":"Post displaying the various ways of finding the factorial of a number in JavaScript"}}},"pageContext":{"slug":"/methods-for-finding-the-factorial-of-a-number-in-javascript/","previous":null,"next":null}},"staticQueryHashes":["1246554614","2841359383"]}